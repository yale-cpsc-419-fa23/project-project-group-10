{"ast":null,"code":"import { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nconst WebSocketVariant = NATIVE_WEBSOCKET_AVAILABLE ? WebSocket : require('ws');\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = WebSocketVariant;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\n     *\n     * @internal\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args));\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n    if (accessToken) this.accessToken = accessToken;\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect();\n      this.connect();\n    }, this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new this.transport(this._endPointURL());\n    } else {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n    }\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n    return status;\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.disconnect();\n    return values_1;\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n}","map":{"version":3,"names":["VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","WebSocketVariant","require","RealtimeClient","constructor","endPoint","options","accessToken","channels","headers","params","timeout","transport","heartbeatIntervalMs","heartbeatTimer","undefined","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","_resolveFetch","customFetch","_fetch","fetch","args","then","default","websocket","Object","assign","_a","apikey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","disconnect","connect","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","_onConnMessage","onclose","_onConnClose","code","reason","clearInterval","reset","getChannels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","result","send","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","_appendParams","vsn","rawMessage","type","_isMember","_trigger","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams"],"sources":["../../src/RealtimeClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}